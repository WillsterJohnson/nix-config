#!/usr/bin/env bash

scriptDir=`cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd`
pushd $scriptDir &>/dev/null
logfile=nixos-switch.log

# Run maximum once per hour in the background if not still running
# $1: pid file path
# $2: description
# $3: command to run
runHourly() {
	if [ ! -f "$1" ]; then touch "$1"; fi
	if [ `stat -c %Y "$1"` -lt `date -d "1 hour ago" +%s` ]; then
		if ! ps -p "`cat "$1"`" &>/dev/null; then
			$3 &>/dev/null &
			echo $! > "$1"
			echo "Started $2 in the background"
		fi
	fi
}

# print error message and exit
# $1: error message
# usage:
# exit `excho "error message"`
excho() {
	echo "$1" >&2
	return 1
}

# help
displayHelp() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo "  --verbose             Enable verbose output"
	echo "  --format              Format only (no rebuild)"
	echo "  --sync                Sync changes after rebuild"
	echo "  --shell <shell>       Specify shell (default: zsh)"
	echo "  --help                Display this help message"
}

# Initialize variables
verbose=
format=
sync=
shell="zsh"
shellrc=`realpath "$scriptDir/modules/home-manager/${shell}rc"`

# Parse command line arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		--verbose) verbose="--verbose"; shift ;;
		--format) format="--format"; shift ;;
		--sync) sync="--sync"; shift ;;
		--shell)
			if [[ -n $2 ]]; then shell=$2 ; shift 2
			else exit `excho "Error: --shell requires an argument"`; fi
			shellrc=`realpath "$scriptDir/modules/home-manager/${shell}rc"`
			if [[ ! -f $shellrc ]]; then exit `excho "Error: RC file for shell '$shell' not found at $shellrc"`; fi
			;;
		--help) exit `displayHelp` ;;
		*) exit `excho "Error: Unknown option: $1"` ;;
	esac
done

# Formatter
alejandra $scriptDir
exitCode=$?
if [[ $exitCode -ne 0 ]]; then exit $exitCode; fi
if [[ -n "$format" ]]; then exit 0; fi

# git diff review
git --no-pager diff -U0
read -p "Press enter to continue..." _
git add .

# Validate shellrc
echo "Validating $shellrc..."
output=`$shell -c "source $shellrc" 2>&1`
if [[ $? -ne 0 ]]; then exit `excho -e "Error: $shellrc is invalid\nOutput:\n$output"`; fi

# Update firefox addons
firefoxAddons=`realpath "$scriptDir/modules/home-manager/firefox-addons.json"`
# TODO: do this without node
nodeScript="\
const fs = require('node:fs');\
fs.writeFileSync(\
	'$firefoxAddons',\
	JSON.stringify(\
		JSON.parse(fs.readFileSync('$firefoxAddons', 'utf8'))\
			.packages['x86_64-linux'],\
		null,\
		2\
	)\
);"
runHourly "firefox-addons.pid" "Firefox addons update" "\
	rm -f $firefoxAddons
	nix flake show \"gitlab:rycee/nur-expressions?dir=pkgs/firefox-addons\" --json 2>/dev/null > $firefoxAddons
	echo \"$nodeScript\" | node"

# Nix garbage collection
olderThan="30d"
runHourly "nid-collect-garbage.pid" "Nix garbage collection ($olderThan)" "sudo nix-collect-garbage --delete-older-than $olderThan"

# Run nixos-rebuild
lineNumber=0
hasErr=
line=
prevLine=""
echo "NixOS Rebuilding..."
sudo nixos-rebuild switch --upgrade --verbose --flake "${scriptDir}#default" 2>&1 \
	| while : ; do
		((lineNumber++))
		if [ -n "$prevLine" ]; then printf "\033[1A\033[K"; fi
		prevLine="$line"
		echo "$line" >> "$logfile"
		echo "$line"
		if [[ "$line" == *"warning: error"* ]]; then hasErr=true; fi
		[[ `IFS= read -r line` ]] || break
	done
exitCode=$?
if [ -n "$prevLine" ]; then printf "\033[1A\033[K"; fi
if [[ $exitCode -ne 0 ]]; then
	if [[ -n "$verbose" ]]; then cat $logfile >&2
	else cat $logfile | grep --color "error" >&2; fi
	exit `excho "\033[0;31mNixOS Rebuild failed\033[0m"`
fi

if [[ -n "$hasErr" ]]; then echo -e "\033[0;33m[log #$lineNumber]: non-fatal error(s)\033[0m" >&2; fi
echo "NixOS Rebuild completed successfully"

git commit -m "`nixos-rebuild list-generations | grep current`"
if [[ "$sync" == "--sync" ]]; then git push
else echo "To push the changes, run '$0 --sync'"; fi

popd &>/dev/null

exec $shell
