#!/usr/bin/env bash

scriptDir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
pushd $scriptDir &>/dev/null
logfile=nixos-switch.log

# $1: pid file path
# $2: description
# $3: command to run
runHourly() {
	if [ ! -f "$1" ]; then touch "$1"; fi
	if [ $(stat -c %Y "$1") -gt $(date -d '1 hour ago' +%s) ]; then
		if ! ps -p "$(cat "$1")" &>/dev/null; then
			$3 &>/dev/null &
			echo $! > "$1"
			echo "Started $2 in the background"
		fi
	fi
}

# help
displayHelp() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo "  --verbose             Enable verbose output"
	echo "  --format              Format only (no rebuild)"
	echo "  --sync                Sync changes after rebuild"
	echo "  --shell <shell>       Specify shell (default: zsh)"
	echo "  --help                Display this help message"
}

# Initialize variables
verbose=
format=
sync=
shell="zsh"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
	case $1 in
		--verbose)
			verbose="--verbose"
			shift
			;;
		--format)
			format="--format"
			shift
			;;
		--sync)
			sync="--sync"
			shift
			;;
		--shell)
			if [[ -n $2 ]]; then
				shell=$2
				shift 2
			else
				echo "Error: --shell requires an argument" >&2
				exit 1
			fi
			;;
		--help)
			displayHelp
			exit 0
			;;
		*)
			echo "Error: Unknown option: $1" >&2
			exit 1
			;;
	esac
done
shellrc=$(realpath $scriptDir/modules/home-manager/${shell}rc)
if [[ ! -f $shellrc ]]; then
	echo "Error: RC file for shell '$shell' not found at $shellrc" >&2
	exit 1
fi

# Formatter
alejandra $scriptDir
exitCode=$?
if [[ $exitCode -ne 0 ]]; then
	exit $exitCode
fi
if [[ -n "$format" ]]; then
	exit 0
fi

# git diff review
git --no-pager diff -U0
read -p "Press enter to continue..." _
git add .

# Validate shellrc
echo "Validating $shellrc..."
output=$($shell -c "source $shellrc" 2>&1)
exitCode=$?
if [[ $exitCode -ne 0 ]]; then
	echo "Error: $shellrc is invalid" >&2
	echo "Output:" >&2
	echo -e "$output" >&2
	exit $exitCode
fi

# Update firefox addons
firefoxAddons=$(realpath $scriptDir/modules/home-manager/firefox-addons.json)
# TODO: do this without node
nodeScript="\
const fs = require('node:fs');\
fs.writeFileSync(\
	'$firefoxAddons',\
	JSON.stringify(\
		JSON.parse(fs.readFileSync('$firefoxAddons', 'utf8'))\
			.packages['x86_64-linux'],\
		null,\
		2\
	)\
);"
runHourly "firefox-addons.pid" "Firefox addons update" "\
	rm -f $firefoxAddons
	nix flake show \"gitlab:rycee/nur-expressions?dir=pkgs/firefox-addons\" --json 2>/dev/null > $firefoxAddons
	echo \"$nodeScript\" | node"

# Nix garbage collection
olderThan="30d"
runHourly "nid-collect-garbage.pid" "Nix garbage collection ($olderThan)" "sudo nix-collect-garbage --delete-older-than $olderThan"

# Run nixos-rebuild
lineNumber=0
hasErr=
prevLine=""
echo "NixOS Rebuilding..."
sudo nixos-rebuild switch --upgrade --verbose --flake "${scriptDir}#default" 2>&1 | \
	while IFS= read -r line; do
		((lineNumber++))
		[ -n "$prevLine" ] && printf "\033[1A\033[K"
		prevLine="$line"
		echo "$line" >> "$logfile"
		echo "$line"
		if [[ "$line" == *"warning: error"* ]]; then
			hasErr=true
		fi
	done
exitCode=$?
[ -n "$prevLine" ] && printf "\033[1A\033[K"
if [[ $exitCode -ne 0 ]]; then
	echo "\033[0;31mNixOS Rebuild failed with exit code $exitCode\033[0m" >&2
	if [[ -n "$verbose" ]]; then
		cat $logfile >&2
	else
		cat $logfile | grep --color error >&2
	fi
	exit $exitCode
else
if [[ -n "$hasErr" ]]; then
		echo -e "\033[0;33m[log #$lineNumber]: warning: error(s) occurred while switching to the new configuration\033[0m"
		echo "NixOS Rebuild completed"
	else
		echo "NixOS Rebuild completed successfully"
	fi
fi

git commit -m "$(nixos-rebuild list-generations | grep current)"
if [[ "$sync" == "--sync" ]]; then
	git push
else
	echo "To push the changes, run '$0 --sync'"
fi

popd &>/dev/null

exec $shell
